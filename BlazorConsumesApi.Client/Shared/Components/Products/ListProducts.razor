@using BlazorTest.Client.Models
@inject NavigationManager NavigationManager

@inject HttpClient http

<h3>ListProducts</h3>

<table class="table">
    <thead>
        <tr>
            <th scope="col">Id</th>
            <th scope="col">Product Name</th>
            <th scope="col">Category Name</th>
            <th scope="col">Editar</th>
            <th scope="col">Borrar</th>

        </tr>
    </thead>



    <tbody>
        @if (lista != null)
        {
            @foreach (var p in lista)
            {
                <tr>
                    <th>@p.id</th>
                    <td>@p.productName</td>
                    <td>@p.categoryName</td>
                    <td>
                        <button class=" btn btn-outline-primary">
                            <i class="fa-solid fa-pen-to-square"></i>
                        </button>
                    </td>
                    <td>
                        <EditForm Model="jason">

                            <button class="btn btn-outline-danger" @onclick="(()=>Delete(p.id))">
                                <i class="fa-solid fa-trash"></i>
                            </button>

                        </EditForm>
                    </td>

                </tr>
            }
        }
        else
        {
            <tr>
                <td colspan="3">No hay datos disponibles</td>
            </tr>

        }
    </tbody>
</table>




@code {
    public List<ProductsJson> lista { get; set; }

    ProductsJson jason = new ProductsJson();

    public async Task<List<ProductsJson>> Get()
    {

        lista = await http.GetFromJsonAsync<List<ProductsJson>>("api/Product/GetProducts");

        return lista;

    }

     void Create()
    {
        NavigationManager.NavigateTo("edit-product");

    }

    public async Task Edit(int id)
    {
        NavigationManager.NavigateTo($"edit-product/{id}");
    }

    public async Task Delete(int id)
    {
        await http.DeleteAsync($"api/Product/EraseProducts/{id}");
        await Get();
    }
   

    protected override async Task OnInitializedAsync()
    {
        await Get();

    }


   

}

<script src="https://kit.fontawesome.com/47ea8ef61d.js" crossorigin="anonymous"></script>